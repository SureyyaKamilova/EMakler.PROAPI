// <auto-generated />
using System;
using DataAccessLayer.Concrete;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccessLayer.Migrations
{
    [DbContext(typeof(Context))]
    partial class ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EntityLayer.Entities.BuildingType", b =>
                {
                    b.Property<string>("BuildingTypeName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("building_type_name");

                    b.Property<int>("IdBuildingType")
                        .HasColumnType("int")
                        .HasColumnName("id_building_type");

                    b.Property<string>("Keyword")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("keyword");

                    b.HasIndex(new[] { "IdBuildingType" }, "IX_building_type");

                    b.ToTable("building_type", (string)null);
                });

            modelBuilder.Entity("EntityLayer.Entities.Document", b =>
                {
                    b.Property<int>("IdDocument")
                        .HasColumnType("int")
                        .HasColumnName("id_document");

                    b.Property<string>("DocumentName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("document_name");

                    b.Property<string>("Keyword")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("keyword");

                    b.Property<string>("Keyword01")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("keyword_01");

                    b.Property<string>("Keyword02")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("keyword_02");

                    b.Property<string>("Keyword03")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("keyword_03");

                    b.HasKey("IdDocument");

                    b.ToTable("document", (string)null);
                });

            modelBuilder.Entity("EntityLayer.Entities.Metro", b =>
                {
                    b.Property<int>("IdMetro")
                        .HasColumnType("int")
                        .HasColumnName("id_metro");

                    b.Property<int?>("FkIdRegion")
                        .HasColumnType("int")
                        .HasColumnName("fk_id_region");

                    b.Property<string>("Keyword01")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("keyword_01");

                    b.Property<string>("Keyword02")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("keyword_02");

                    b.Property<string>("Keyword03")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("keyword_03");

                    b.Property<string>("Keyword04")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("keyword_04");

                    b.Property<string>("Keyword05")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("keyword_05");

                    b.Property<string>("MetroName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("metro_name");

                    b.HasKey("IdMetro");

                    b.HasIndex(new[] { "FkIdRegion" }, "IX_fk_id_region");

                    b.ToTable("metro", (string)null);
                });

            modelBuilder.Entity("EntityLayer.Entities.OperationType", b =>
                {
                    b.Property<int>("IdOperationType")
                        .HasColumnType("int")
                        .HasColumnName("id_operation_type");

                    b.Property<string>("Keyword")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("keyword");

                    b.Property<string>("OperationTypeName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("operation_type_name");

                    b.HasKey("IdOperationType");

                    b.ToTable("operation_type", (string)null);
                });

            modelBuilder.Entity("EntityLayer.Entities.OwnerType", b =>
                {
                    b.Property<int>("IdOwnerType")
                        .HasColumnType("int")
                        .HasColumnName("id_owner_type");

                    b.Property<string>("Keyword")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("keyword");

                    b.Property<string>("OwnerTypeName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("owner_type_name");

                    b.HasKey("IdOwnerType");

                    b.ToTable("owner_type", (string)null);
                });

            modelBuilder.Entity("EntityLayer.Entities.Property", b =>
                {
                    b.Property<int>("IdProperty")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_property");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdProperty"));

                    b.Property<string>("Address")
                        .HasColumnType("ntext")
                        .HasColumnName("address");

                    b.Property<string>("ApprovmentMessage")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("approvment_message");

                    b.Property<int?>("ApprovmentStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("approvment_status");

                    b.Property<double?>("Area")
                        .HasColumnType("float")
                        .HasColumnName("area");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("code");

                    b.Property<string>("CpName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("cp_name");

                    b.Property<string>("CpPhoneNumber01")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("cp_phone_number_01");

                    b.Property<string>("CpPhoneNumber02")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("cp_phone_number_02");

                    b.Property<string>("CpPhoneNumber03")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("cp_phone_number_03");

                    b.Property<string>("Data")
                        .HasColumnType("ntext")
                        .HasColumnName("data");

                    b.Property<string>("EX")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("eX");

                    b.Property<string>("EY")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("eY");

                    b.Property<int?>("FkIdBuildingType")
                        .HasColumnType("int")
                        .HasColumnName("fk_id_building_type");

                    b.Property<int?>("FkIdCity")
                        .HasColumnType("int")
                        .HasColumnName("fk_id_city");

                    b.Property<int?>("FkIdCurrency")
                        .HasColumnType("int")
                        .HasColumnName("fk_id_currency");

                    b.Property<int?>("FkIdDocument")
                        .HasColumnType("int")
                        .HasColumnName("fk_id_document");

                    b.Property<int?>("FkIdLink")
                        .HasColumnType("int")
                        .HasColumnName("fk_id_link");

                    b.Property<int?>("FkIdMetro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("fk_id_metro");

                    b.Property<int?>("FkIdOperationType")
                        .HasColumnType("int")
                        .HasColumnName("fk_id_operation_type");

                    b.Property<int?>("FkIdOwnerType")
                        .HasColumnType("int")
                        .HasColumnName("fk_id_owner_type");

                    b.Property<int?>("FkIdPropertyType")
                        .HasColumnType("int")
                        .HasColumnName("fk_id_property_type");

                    b.Property<int?>("FkIdRepair")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("fk_id_repair");

                    b.Property<int?>("FkIdRoom")
                        .HasColumnType("int")
                        .HasColumnName("fk_id_room");

                    b.Property<int?>("FkIdSource")
                        .HasColumnType("int")
                        .HasColumnName("fk_id_source");

                    b.Property<int?>("FkIdTarget")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("fk_id_target");

                    b.Property<int?>("Floor")
                        .HasColumnType("int")
                        .HasColumnName("floor");

                    b.Property<int?>("FloorOf")
                        .HasColumnType("int")
                        .HasColumnName("floor_of");

                    b.Property<double?>("GeneralArea")
                        .HasColumnType("float")
                        .HasColumnName("general_area");

                    b.Property<string>("Images")
                        .HasColumnType("ntext")
                        .HasColumnName("images");

                    b.Property<DateTime?>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("insert_date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<double?>("Price")
                        .HasColumnType("float")
                        .HasColumnName("price");

                    b.Property<double?>("UnitPrice")
                        .HasColumnType("float")
                        .HasColumnName("unit_price");

                    b.Property<string>("UploadMessage")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("upload_message");

                    b.Property<int?>("UploadStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("upload_status");

                    b.HasKey("IdProperty");

                    b.HasIndex(new[] { "ApprovmentStatus" }, "IX_property_approvment_status");

                    b.HasIndex(new[] { "Code" }, "IX_property_code")
                        .IsDescending();

                    b.HasIndex(new[] { "CpPhoneNumber01" }, "IX_property_cp_phone_number_01");

                    b.HasIndex(new[] { "CpPhoneNumber02" }, "IX_property_cp_phone_number_02");

                    b.HasIndex(new[] { "CpPhoneNumber03" }, "IX_property_cp_phone_number_03");

                    b.HasIndex(new[] { "FkIdLink" }, "IX_property_fk_id_link");

                    b.HasIndex(new[] { "FkIdOwnerType" }, "IX_property_fk_id_owner_type");

                    b.HasIndex(new[] { "FkIdSource" }, "IX_property_fk_id_source");

                    b.HasIndex(new[] { "InsertDate" }, "IX_property_insert_date")
                        .IsDescending();

                    b.HasIndex(new[] { "UploadStatus" }, "IX_property_upload_status");

                    b.ToTable("property", null, t =>
                        {
                            t.HasTrigger("trg_insert_agency_phone_number");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("EntityLayer.Entities.PropertyType", b =>
                {
                    b.Property<int>("IdPropertyType")
                        .HasColumnType("int")
                        .HasColumnName("id_property_type");

                    b.Property<string>("PropertyTypeName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("property_type_name");

                    b.HasKey("IdPropertyType");

                    b.ToTable("property_type", (string)null);
                });

            modelBuilder.Entity("EntityLayer.Entities.Region", b =>
                {
                    b.Property<int?>("IdRegion")
                        .HasColumnType("int")
                        .HasColumnName("id_region");

                    b.Property<string>("Keyword01")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("keyword_01");

                    b.Property<string>("Keyword02")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("keyword_02");

                    b.Property<string>("Keyword03")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("keyword_03");

                    b.Property<string>("RegionCode")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnName("region_code");

                    b.Property<string>("RegionName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("region_name");

                    b.HasIndex(new[] { "IdRegion" }, "IX_id_region")
                        .IsUnique()
                        .HasFilter("[id_region] IS NOT NULL");

                    b.HasIndex(new[] { "RegionCode" }, "IX_region_code");

                    b.ToTable("region", (string)null);
                });

            modelBuilder.Entity("EntityLayer.Entities.RegionUnit01", b =>
                {
                    b.Property<int?>("IdRegion")
                        .HasColumnType("int")
                        .HasColumnName("id_region");

                    b.Property<string>("Keyword01")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("keyword_01");

                    b.Property<string>("Keyword02")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("keyword_02");

                    b.Property<string>("Keyword03")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("keyword_03");

                    b.Property<string>("RegionCode")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnName("region_code");

                    b.Property<string>("RegionName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("region_name");

                    b.HasIndex(new[] { "IdRegion" }, "IX_region_unit_01_id_region")
                        .IsUnique()
                        .HasFilter("[id_region] IS NOT NULL");

                    b.HasIndex(new[] { "RegionCode" }, "IX_region_unit_01_region_code");

                    b.ToTable("region_unit_01", (string)null);
                });

            modelBuilder.Entity("EntityLayer.Entities.RepairRate", b =>
                {
                    b.Property<int>("IdRepairRate")
                        .HasColumnType("int")
                        .HasColumnName("id_repair_rate");

                    b.Property<int?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("is_active");

                    b.Property<string>("RepairRateName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("repair_rate_name");

                    b.HasKey("IdRepairRate");

                    b.ToTable("repair_rate", (string)null);
                });

            modelBuilder.Entity("EntityLayer.Entities.RoomCount", b =>
                {
                    b.Property<int>("IdRoomCount")
                        .HasColumnType("int")
                        .HasColumnName("id_room_count");

                    b.Property<string>("Keyword")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("keyword");

                    b.Property<string>("RoomCountName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("room_count_name");

                    b.HasKey("IdRoomCount");

                    b.ToTable("room_count", (string)null);
                });

            modelBuilder.Entity("EntityLayer.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasMaxLength(13)
                        .IsUnicode(false)
                        .HasColumnType("char(13)")
                        .IsFixedLength();

                    b.Property<bool>("IsValidate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("OtpCode")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("char(6)")
                        .IsFixedLength();

                    b.Property<DateTime>("OtpCreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("UserMail")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("UserPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("PK__Users__1788CC4CDE2E4347");

                    b.ToTable("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
